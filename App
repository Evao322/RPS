import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.ButtonType;
import java.util.Random;

public class App extends Application {

    private int winningScore = 5;
    private int roundsToPlay = 5;
    private int playerScore = 0;
    private int computerScore = 0;
    private Label roundsLabel;
    private Label playerScoreLabel;
    private Label computerScoreLabel;
    private ImageView playerSelectionImageView;
    private ImageView computerSelectionImageView;
    private static final int MAX_ROUNDS = 10;
    private static final int WINNING_SCORE = 5;

    public enum Choice {
        ROCK("rock.png"),
        PAPER("paper.png"),
        SCISSORS("scissors.png");
    
        private String imagePath;
    
        private Choice(String imagePath) {
            this.imagePath = imagePath;
        }
    
        public String getImagePath() {
            return this.imagePath;
        }
    }
    
    
    public enum Outcome {
        WIN, LOSE, DRAW
    }
    
    

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();
        root.setPadding(new Insets(10, 10, 10, 10));

        // Create the header
        Label headerLabel = new Label("Rock Paper Scissors");
        headerLabel.getStyleClass().add("header-label");
        root.setTop(headerLabel);
        BorderPane.setAlignment(headerLabel, Pos.CENTER);

        // Create the center
        VBox centerVBox = new VBox(10);
        centerVBox.setAlignment(Pos.CENTER);

        // Create the game selection buttons
        ToggleGroup gameToggleGroup = new ToggleGroup();
        RadioButton singlePlayerButton = new RadioButton("Single Player");
        RadioButton multiPlayerButton = new RadioButton("Multiplayer");
        singlePlayerButton.setToggleGroup(gameToggleGroup);
        multiPlayerButton.setToggleGroup(gameToggleGroup);
        gameToggleGroup.selectToggle(singlePlayerButton);

        HBox gameSelectionHBox = new HBox(10);
        gameSelectionHBox.setAlignment(Pos.CENTER);
        gameSelectionHBox.getChildren().addAll(singlePlayerButton, multiPlayerButton);

        // Create the round selection menu
        Label roundsSelectionLabel = new Label("Select the number of rounds to play:");
        ComboBox<Integer> roundsComboBox = new ComboBox<>();
        roundsComboBox.getItems().addAll(3, 5, 7, 10);
        roundsComboBox.setValue(5);

        HBox roundsSelectionHBox = new HBox(10);
        roundsSelectionHBox.setAlignment(Pos.CENTER);
        roundsSelectionHBox.getChildren().addAll(roundsSelectionLabel, roundsComboBox);

        // Create the buttons for the game
        Button rockButton = new Button("Rock");
        Button paperButton = new Button("Paper");
        Button scissorsButton = new Button("Scissors");

        rockButton.setOnAction(e -> playRound(Choice.ROCK));
        paperButton.setOnAction(e -> playRound(Choice.PAPER));
        scissorsButton.setOnAction(e -> playRound(Choice.SCISSORS));

        HBox gameButtonsHBox = new HBox(10);
        gameButtonsHBox.setAlignment(Pos.CENTER);
        gameButtonsHBox.getChildren().addAll(rockButton, paperButton, scissorsButton);

        // Create the labels for the score and rounds
        roundsLabel = new Label("Rounds: " + roundsToPlay);
        playerScoreLabel = new Label("Player: " + playerScore);
        computerScoreLabel = new Label("Computer: " + computerScore);

        HBox scoreLabelsHBox = new HBox(10);
        scoreLabelsHBox.setAlignment(Pos.CENTER);
        scoreLabelsHBox.getChildren().addAll(playerScoreLabel, computerScoreLabel);

        // Create the images to show the player and computer selection
        playerSelectionImageView = new ImageView();
        computerSelectionImageView = new ImageView();
    }
        private void resetGame() {
        playerScore = 0;
        computerScore = 0;
        roundsToPlay = MAX_ROUNDS;
        updateScoreLabels();
        updateRoundsLabel();
    }

    private void updateScoreLabels() {
        playerScoreLabel.setText("Player: " + playerScore);
        computerScoreLabel.setText("Computer: " + computerScore);
    }

        private void updateRoundsLabel() {
            roundsLabel.setText("Rounds left: " + roundsToPlay);
        }

    private void displaySelection(App.Choice playerChoice, App.Choice computerChoice) {
        Image playerSelectionImage = new Image(getClass().getResourceAsStream(playerChoice.getImagePath()));
        playerSelectionImageView.setImage(playerSelectionImage);

        Image computerSelectionImage = new Image(getClass().getResourceAsStream(computerChoice.getImagePath()));
        computerSelectionImageView.setImage(computerSelectionImage);
    }

    private App.Outcome getOutcome(App.Choice playerChoice, App.Choice computerChoice) {
        if (playerChoice == computerChoice) {
            return App.Outcome.DRAW;
        } else if (playerChoice == App.Choice.ROCK && computerChoice == App.Choice.SCISSORS ||
                playerChoice == App.Choice.PAPER && computerChoice == App.Choice.ROCK ||
                playerChoice == App.Choice.SCISSORS && computerChoice == App.Choice.PAPER) {
            return App.Outcome.WIN;
        } else {
            return App.Outcome.LOSE;
        }
    }



    private void playRound(App.Choice playerChoice) {
        App.Choice computerChoice = getComputerChoice();
        App.Outcome outcome = getOutcome(playerChoice, computerChoice);

        displayChoices(playerChoice, computerChoice);

        switch (outcome) {
            case WIN:
                playerScore++;
                updateScoreLabels();
                break;
            case LOSE:
                computerScore++;
                updateScoreLabels();
                break;
            case DRAW:
                break;
        }

        if (playerScore >= WINNING_SCORE || computerScore >= WINNING_SCORE) {
            // Display a message indicating that the game is over and ask the user if they want to play again
            ButtonType yesButtonType = new ButtonType("Yes", ButtonBar.ButtonData.YES);
            ButtonType noButtonType = new ButtonType("No", ButtonBar.ButtonData.NO);
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to play again?", yesButtonType, noButtonType);
            alert.showAndWait();
            if (alert.getResult() == yesButtonType) {
                resetGame();
            } else {
                // End the game
                Platform.exit();
            }
        } else {
            // Continue the game
            roundsToPlay--;
            updateRoundsLabel();
        }
    }

    private void displayChoices(App.Choice playerChoice, App.Choice computerChoice) {
    }
    private App.Choice getComputerChoice() {
        int randomIndex = (int) (Math.random() * App.Choice.values().length);
        return App.Choice.values()[randomIndex];
    }

    public static void main(String[] args) {
        launch(args);
    }
        }
